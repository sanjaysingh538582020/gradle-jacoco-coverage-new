<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="com.palantir.jacoco.JacocoCoveragePluginTest" tests="5" skipped="0" failures="5" errors="0" timestamp="2021-03-15T19:34:55" hostname="DESKTOP-377GUP4" time="0.461">
  <properties/>
  <testcase name="check task depends on checkCoverage task" classname="com.palantir.jacoco.JacocoCoveragePluginTest" time="0.28">
    <failure message="java.lang.NoSuchMethodError: org.gradle.internal.classloader.ClasspathUtil.getClasspath(Ljava/lang/ClassLoader;)Ljava/util/List;" type="java.lang.NoSuchMethodError">java.lang.NoSuchMethodError: org.gradle.internal.classloader.ClasspathUtil.getClasspath(Ljava/lang/ClassLoader;)Ljava/util/List;
	at nebula.test.functional.internal.classpath.ClasspathAddingInitScriptBuilder.getClasspathAsFiles(ClasspathAddingInitScriptBuilder.groovy:40)
	at nebula.test.functional.internal.classpath.ClasspathAddingInitScriptBuilder.build(ClasspathAddingInitScriptBuilder.groovy:18)
	at nebula.test.functional.internal.classpath.ClasspathInjectingGradleHandleFactory.start(ClasspathInjectingGradleHandleFactory.groovy:29)
	at nebula.test.functional.internal.DefaultGradleRunner.handle(DefaultGradleRunner.groovy:40)
	at nebula.test.IntegrationSpec.launcher(IntegrationSpec.groovy:86)
	at nebula.test.IntegrationSpec.runTasks(IntegrationSpec.groovy:278)
	at nebula.test.IntegrationSpec.runTasksSuccessfully(IntegrationSpec.groovy:263)
	at com.palantir.jacoco.JacocoCoveragePluginTest.check task depends on checkCoverage task(JacocoCoveragePluginTest.groovy:48)
</failure>
  </testcase>
  <testcase name="check fails when coverage is required" classname="com.palantir.jacoco.JacocoCoveragePluginTest" time="0.07">
    <failure message="java.lang.NoSuchMethodError: org.gradle.internal.classloader.ClasspathUtil.getClasspath(Ljava/lang/ClassLoader;)Ljava/util/List;" type="java.lang.NoSuchMethodError">java.lang.NoSuchMethodError: org.gradle.internal.classloader.ClasspathUtil.getClasspath(Ljava/lang/ClassLoader;)Ljava/util/List;
	at nebula.test.functional.internal.classpath.ClasspathAddingInitScriptBuilder.getClasspathAsFiles(ClasspathAddingInitScriptBuilder.groovy:40)
	at nebula.test.functional.internal.classpath.ClasspathAddingInitScriptBuilder.build(ClasspathAddingInitScriptBuilder.groovy:18)
	at nebula.test.functional.internal.classpath.ClasspathInjectingGradleHandleFactory.start(ClasspathInjectingGradleHandleFactory.groovy:29)
	at nebula.test.functional.internal.DefaultGradleRunner.handle(DefaultGradleRunner.groovy:40)
	at nebula.test.IntegrationSpec.launcher(IntegrationSpec.groovy:86)
	at nebula.test.IntegrationSpec.runTasks(IntegrationSpec.groovy:278)
	at nebula.test.IntegrationSpec.runTasksWithFailure(IntegrationSpec.groovy:272)
	at com.palantir.jacoco.JacocoCoveragePluginTest.check fails when coverage is required(JacocoCoveragePluginTest.groovy:65)
</failure>
  </testcase>
  <testcase name="checkCoverage succeeds when no coverage is required" classname="com.palantir.jacoco.JacocoCoveragePluginTest" time="0.028">
    <failure message="java.lang.NoSuchMethodError: org.gradle.internal.classloader.ClasspathUtil.getClasspath(Ljava/lang/ClassLoader;)Ljava/util/List;" type="java.lang.NoSuchMethodError">java.lang.NoSuchMethodError: org.gradle.internal.classloader.ClasspathUtil.getClasspath(Ljava/lang/ClassLoader;)Ljava/util/List;
	at nebula.test.functional.internal.classpath.ClasspathAddingInitScriptBuilder.getClasspathAsFiles(ClasspathAddingInitScriptBuilder.groovy:40)
	at nebula.test.functional.internal.classpath.ClasspathAddingInitScriptBuilder.build(ClasspathAddingInitScriptBuilder.groovy:18)
	at nebula.test.functional.internal.classpath.ClasspathInjectingGradleHandleFactory.start(ClasspathInjectingGradleHandleFactory.groovy:29)
	at nebula.test.functional.internal.DefaultGradleRunner.handle(DefaultGradleRunner.groovy:40)
	at nebula.test.IntegrationSpec.launcher(IntegrationSpec.groovy:86)
	at nebula.test.IntegrationSpec.runTasks(IntegrationSpec.groovy:278)
	at nebula.test.IntegrationSpec.runTasksSuccessfully(IntegrationSpec.groovy:263)
	at com.palantir.jacoco.JacocoCoveragePluginTest.checkCoverage succeeds when no coverage is required(JacocoCoveragePluginTest.groovy:81)
</failure>
  </testcase>
  <testcase name="All syntax variations work" classname="com.palantir.jacoco.JacocoCoveragePluginTest" time="0.05">
    <failure message="java.lang.NoSuchMethodError: org.gradle.internal.classloader.ClasspathUtil.getClasspath(Ljava/lang/ClassLoader;)Ljava/util/List;" type="java.lang.NoSuchMethodError">java.lang.NoSuchMethodError: org.gradle.internal.classloader.ClasspathUtil.getClasspath(Ljava/lang/ClassLoader;)Ljava/util/List;
	at nebula.test.functional.internal.classpath.ClasspathAddingInitScriptBuilder.getClasspathAsFiles(ClasspathAddingInitScriptBuilder.groovy:40)
	at nebula.test.functional.internal.classpath.ClasspathAddingInitScriptBuilder.build(ClasspathAddingInitScriptBuilder.groovy:18)
	at nebula.test.functional.internal.classpath.ClasspathInjectingGradleHandleFactory.start(ClasspathInjectingGradleHandleFactory.groovy:29)
	at nebula.test.functional.internal.DefaultGradleRunner.handle(DefaultGradleRunner.groovy:40)
	at nebula.test.IntegrationSpec.launcher(IntegrationSpec.groovy:86)
	at nebula.test.IntegrationSpec.runTasks(IntegrationSpec.groovy:278)
	at nebula.test.IntegrationSpec.runTasksSuccessfully(IntegrationSpec.groovy:263)
	at com.palantir.jacoco.JacocoCoveragePluginTest.All syntax variations work(JacocoCoveragePluginTest.groovy:105)
</failure>
  </testcase>
  <testcase name="Violations are reported for every realm" classname="com.palantir.jacoco.JacocoCoveragePluginTest" time="0.031">
    <failure message="java.lang.NoSuchMethodError: org.gradle.internal.classloader.ClasspathUtil.getClasspath(Ljava/lang/ClassLoader;)Ljava/util/List;" type="java.lang.NoSuchMethodError">java.lang.NoSuchMethodError: org.gradle.internal.classloader.ClasspathUtil.getClasspath(Ljava/lang/ClassLoader;)Ljava/util/List;
	at nebula.test.functional.internal.classpath.ClasspathAddingInitScriptBuilder.getClasspathAsFiles(ClasspathAddingInitScriptBuilder.groovy:40)
	at nebula.test.functional.internal.classpath.ClasspathAddingInitScriptBuilder.build(ClasspathAddingInitScriptBuilder.groovy:18)
	at nebula.test.functional.internal.classpath.ClasspathInjectingGradleHandleFactory.start(ClasspathInjectingGradleHandleFactory.groovy:29)
	at nebula.test.functional.internal.DefaultGradleRunner.handle(DefaultGradleRunner.groovy:40)
	at nebula.test.IntegrationSpec.launcher(IntegrationSpec.groovy:86)
	at nebula.test.IntegrationSpec.runTasks(IntegrationSpec.groovy:278)
	at nebula.test.IntegrationSpec.runTasksWithFailure(IntegrationSpec.groovy:272)
	at com.palantir.jacoco.JacocoCoveragePluginTest.Violations are reported for every realm(JacocoCoveragePluginTest.groovy:123)
</failure>
  </testcase>
  <system-out><![CDATA[Running test from E:\Learning\gradle-jacoco-coverage-new\build\test\com.palantir.jacoco.JacocoCoveragePluginTest\check-task-depends-on-checkCoverage-task
Running test from E:\Learning\gradle-jacoco-coverage-new\build\test\com.palantir.jacoco.JacocoCoveragePluginTest\check-fails-when-coverage-is-required
Running test from E:\Learning\gradle-jacoco-coverage-new\build\test\com.palantir.jacoco.JacocoCoveragePluginTest\checkCoverage-succeeds-when-no-coverage-is-required
Running test from E:\Learning\gradle-jacoco-coverage-new\build\test\com.palantir.jacoco.JacocoCoveragePluginTest\All-syntax-variations-work
Running test from E:\Learning\gradle-jacoco-coverage-new\build\test\com.palantir.jacoco.JacocoCoveragePluginTest\Violations-are-reported-for-every-realm
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
